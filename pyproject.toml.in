# configuration file for the iode python package

[build-system]
requires = ["scikit-build-core >=0.4.3", "nanobind >=1.3.2"]
build-backend = "scikit_build_core.build"

[project]
name = "iode"
version = "${CMAKE_PROJECT_VERSION}"
description = ""
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { name = "Jean-Marc Paul", email = "jmarc.paul@gmail.com" },
    { name = "Geert Bryon", email = "gb@plan.be" },
    { name = "Alix Damman", email = "ald@plan.be" },
    { name = "Yannick Van den Abbeel", email = "yvda@plan.be" },
]
classifiers = [
    "License :: GPLv3",
]

# runtime dependency specification
dependencies = [ "numpy", "pandas" ]

[project.urls]
Homepage = "${CMAKE_PROJECT_HOMEPAGE_URL}"

# see https://scikit-build-core.readthedocs.io/en/latest/getting_started.html
[tool.scikit-build]

# Protect the configuration against future changes in scikit-build-core
minimum-version = "0.6"

# Verbose printout when building.
cmake.verbose = true

# The build targets to use when building the project. Empty builds the default
# target.
cmake.targets = ["iode_python_api"]

# The wheel will automatically look for Python packages at src/<package_name>, 
# python/<package_name>, and <package_name>, in that order. 
# If you want to list packages explicitly, you can. 
# The final path element is the package.
wheel.packages = ["python_api/iode"]

# Scikit-build-core defaults to using your .gitignore to select what to exclude from 
# the source distribution. However, sdist.include and sdist.exclude can be used to 
# override this behavior
sdist.include = ["_version.py", "data"]
sdist.exclude = ["_version.py.in"]

# The logging level to display, "DEBUG", "INFO", "WARNING", and "ERROR" are
# possible options.
logging.level = "DEBUG"

# The build directory. Defaults to a temporary directory, but can be set.
build-dir = "./out/build/python/{wheel_tag}"

# Build stable ABI wheels for CPython 3.12+
wheel.py-api = "cp312"

[tool.cibuildwheel]
# Necessary to see build output from the actual compilation
build-verbosity = 1

# Run pytest to ensure that the package was correctly built
test-command = "pytest {project}/tests"
test-requires = "pytest"
