name: Build Windows installer and updater

on: 
  # line below makes jobs defined in this script (workflow) reusable
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_call:
    inputs:
      build-config:
        default: 'release'
        required: true
        type: string

jobs:
    # see https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow 
    build_doc:
      uses: ./.github/workflows/github-actions-doc.yml

    build_python:
      uses: ./.github/workflows/github-actions-python.yml
      with:
        build-config: release

    build_nsis:
        name: Build installer using NSIS
        needs: [build_doc, build_python]
        strategy:
          matrix:
            os: [windows-latest]
    
        runs-on: ${{ matrix.os }}

        # see https://docs.github.com/en/actions/learn-github-actions/expressions#example
        env:
          os: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
    
        steps:
          - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
          - run: echo "This job is now running on a ${{ runner.os }} server"
          - run: echo "The name of the repository is ${{ github.repository }}."
          - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
          - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
          - run: echo "The workspace directory is ${{ github.workspace }}."
          - name: Checkout repository code
            uses: actions/checkout@v2
          - run: echo "The ${{ github.repository }} repository has been cloned to the runner."

          - name: Restore Documentation Files
            uses: actions/download-artifact@v4
            with:
              name: iode-doc
              path: ${{ github.workspace }}/doc/build
          - name: check for documentation files
            run: dir ${{ github.workspace }}/doc/build

          - name: Install Qt
            uses: ./.github/actions/install_qt
    
          - name: Install dependencies on linux
            if: runner.os == 'Linux'
            run: sudo apt install ninja-build
          - name: Install dependencies on windows
            if: runner.os == 'Windows'
            shell: bash
            run: |
              choco install ninja
              ninja --version
              cmake --version
          - name: Add cl.exe to PATH
            if: runner.os == 'Windows'
            # See https://github.com/marketplace/actions/enable-developer-command-prompt
            uses: ilammy/msvc-dev-cmd@v1
            with:
              arch: x64

          - name: Print preset config
            shell: bash
            run: echo "${{ env.os }}-${{ inputs.build-config }}"
          - name: Configure CMake
            shell: bash
            # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
            # see CMakePresets.json file
            # for more details about cmake preset:
            #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
            #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
            run: | 
              cmake --version
              cmake --preset ${{ env.os }}-${{ inputs.build-config }}

          - name: Build the SCR4, C and C++ API libs
            uses: ./.github/actions/build_api
            with:
              cmake-config: ${{ env.os }}-${{ inputs.build-config }}
          
          - name: Test the C and C++ APIs
            uses: ./.github/actions/test_api
            with:
              cmake-config: ${{ env.os }}-${{ inputs.build-config }}
          
          - name: Build the GUI
            run: cmake --build --verbose --preset ${{ env.os }}-${{ inputs.build-config }} --target iode_gui 
    
          - name: Build Windows Installer and Updater (NSIS)
            run: cmake --build --verbose --preset ${{ env.os }}-${{ inputs.build-config }} --target nsis

          - name: Upload Windows Installer and Updater
            if: ${{ success() }}
            uses: actions/upload-artifact@v4
            with:
              name: iode-nsis
              path: "${{ github.workspace }}/out/build/${{ env.os }}-${{ inputs.build-config }}/nsis/*.exe"
              if-no-files-found: error 
    
          - run: echo "This job's status is ${{ job.status }}."
    