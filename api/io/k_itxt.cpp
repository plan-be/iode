/**
 *  @header4iode
 * 
 *  Functions to import variables and comments from the legacy Belgostat format (obsolete). 
 *  
 *  Format
 *  ------
 *      N;0104104000023;   1;19801231;               8,3;D
 *      D;code;freq;date;value;status
 *   
 *      0104104000023;N;Werkloosheidsgraden (bron: Eurostat), Seizoengezuiverde gegevens;Taux de chômage (source: Eurostat), Données désaissonnalisées;Taux de chômage (source: Eurostat), Données désaissonnalisées;           ;             0,010;
 *      code;N;cmtnl;cmtfr;cmten;units1;units2
 *
 *  List of functions 
 *  -----------------
 *  See k_idif.c for a similar group of functions.
 */
#include "api/utils/time.h"
#include "api/k_super.h"
#include "api/io/import.h"


/*
    Reads a txt file with the following description when loaded in excel
    this is the format generated by the Belgostat program
*/


int ImportObjsTXT::read_header(YYFILE* yy, SAMPLE* smpl)
{
    memcpy(&TXT_smpl, smpl, sizeof(SAMPLE));
    TXT_freq = (TXT_smpl.s_p1).p_p;
    TXT_nbper = PER_nbper(&(TXT_smpl.s_p1));
    if(TXT_nbper < 0) {
        kerror(0, "Please specify FROM and TO period");
        return(-1);
    }

    TXT_fd = yy->yy_fd;
    return(0);
}

int ImportObjsTXT::read_value(char* date, int* shift, char* tval, double* dval)
{
    PERIOD  *per;
    char    buf[21], y[5], m[3];
    int     pos;
    long    ly, lm;

    SCR_strlcpy((unsigned char*) y, (unsigned char*) date, 4);
    y[4] = 0;
    ly = atoi(y);        /* JMP 13-02-2013 */
    SCR_strlcpy((unsigned char*) m, (unsigned char*) date + 4, 2);
    m[2] = 0;
    lm = atoi(m);    /* JMP 13-02-2013 */

    switch(TXT_freq) {
        case 'Q' :
            lm = 1 + lm/4;
            break; /* JMP 05-10-00 */
        case 'Y' :
            lm = lm/12;
            break;
    }

    sprintf(buf, "%ld%c%ld", ly, TXT_freq, lm);
    per = PER_atoper(buf);
    *shift = PER_diff_per(per, &(TXT_smpl.s_p1));
    SW_nfree(per);

    pos = U_pos(',', (unsigned char*) tval);
    if(pos>=0) tval[pos] = '.';

    *dval= atof(tval);
    
    return(0);
}

int ImportObjsTXT::read_numerical_value(YYFILE* yy, char* name, int* shift, double* vector)
{
    char    buf[257], **tbl = NULL;
    long    nbper;

    while(1) {
        if(fgets(buf, 256, TXT_fd) == NULL)  return(-1);
        tbl = (char**) SCR_vtoms((unsigned char*) buf, (unsigned char*) "; ");
        if(SCR_tbl_size((unsigned char**) tbl) != 6) {
            SCR_free_tbl((unsigned char**) tbl);
            continue;
        }
        /* The same periodicity */
        nbper = atoi(tbl[2]);
        if(nbper != TXT_nbper) {
            SCR_free_tbl((unsigned char**) tbl);
            continue;
        }
        else break;
    }

    SCR_strlcpy((unsigned char*) name, (unsigned char*) tbl[1], 79); /* JMP 13-02-2013 */
    read_value(tbl[3], shift, tbl[4], vector);
    SCR_free_tbl((unsigned char**) tbl);
    return(0);
}


/* Comments */


int ImportCommentsTXT::read_header(ImportCmtFromFile* impdef, char* file, int lang)
{
    SCR_strip((unsigned char*) file);
    TXT_fd = fopen(file, "r");
    if(TXT_fd == NULL) return(-1);

//  switch(lang) {
//      case 0 : TXT_lang = 4; break; /* English */
//      case 1 : TXT_lang = 3; break; /* French */
//      case 2 : TXT_lang = 2; break; /* Dutch */
//  }
    TXT_lang = 4 - lang;

    return(0);
}

int ImportCommentsTXT::read_comment(char* name, char** cmt)
{
    char    buf[1025], **tbl;
    int     len;

    if(fgets(buf, 1024, TXT_fd) == NULL)  return(-1);
    tbl = (char**) SCR_vtom((unsigned char*) buf, (int) ';');
    if(SCR_tbl_size((unsigned char**) tbl) < 7) {
        SCR_free_tbl((unsigned char**) tbl);
        return(-1);
    }

    SCR_strlcpy((unsigned char*) name, (unsigned char*) tbl[0], 79);              /* JMP 13-02-2013 */
    SCR_AnsiToOem((unsigned char*) tbl[TXT_lang], (unsigned char*) tbl[TXT_lang]);
    SCR_sqz((unsigned char*) tbl[5]);
    SCR_sqz((unsigned char*) tbl[6]);
    len = (int)(strlen(tbl[TXT_lang]) + strlen(tbl[5]) + strlen(tbl[6]) + 10);
    *cmt = SW_nalloc(len);

    sprintf(*cmt, "%s (%s, %s)",tbl[TXT_lang], tbl[5], tbl[6]);

    SCR_free_tbl((unsigned char**) tbl);
    return(0);
}

int ImportCommentsTXT::close()
{
    fclose(TXT_fd);
    TXT_fd = NULL;
    return(0);
}
