// ************************************************************************ //
// WARNING
// -------
// The types declared in this file were generated from data read from a
// Type Library. If this type library is explicitly or indirectly (via
// another type library referring to this type library) re-imported, or the
// 'Refresh' command of the Type Library Editor activated while editing the
// Type Library, the contents of this file will be regenerated and all
// manual modifications will be lost.
// ************************************************************************ //

// $Rev: 52393 $
// File generated on 14/01/2016 16:18:27 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\usr\iode_src\iodecomTest\IodeComServer (1)
// LIBID: {093A7EC0-D7E8-11D4-9BB9-0001025007D6}
// LCID: 0
// Helpfile:
// HelpString: Iode Com Library
// DepndLst:
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   IodeCom_TLBH
#define   IodeCom_TLBH

#pragma option push -b -a4 -w-inl -w-8118

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Iodecom_tlb
{

// *********************************************************************//
// HelpString: Iode Com Library
// Version:    1.1
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:
//   Type Libraries     : LIBID_xxxx
//   CoClasses          : CLSID_xxxx
//   DISPInterfaces     : DIID_xxxx
//   Non-DISP interfaces: IID_xxxx
// *********************************************************************//
extern __declspec (package) const GUID LIBID_IodeCom;
extern __declspec (package) const GUID IID_ICCIode;
extern __declspec (package) const GUID CLSID_CCIode;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary
// *********************************************************************//
interface DECLSPEC_UUID("{093A7EC1-D7E8-11D4-9BB9-0001025007D6}") ICCIode;
typedef TComInterface<ICCIode, &IID_ICCIode> ICCIodePtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library
// (NOTE: Here we map each CoClass to its Default Interface)
//
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this
// TypeLibrary. It simplifies the updating of macros when CoClass name
// change.
// *********************************************************************//
typedef ICCIode CCIode;
typedef ICCIodePtr CCIodePtr;

#define LIBID_OF_CCIode (&LIBID_IodeCom)
// *********************************************************************//
// Interface: ICCIode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {093A7EC1-D7E8-11D4-9BB9-0001025007D6}
// *********************************************************************//
interface ICCIode  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/,
                                            int* Status/*[out,retval]*/) = 0; // [1]
  virtual HRESULT STDMETHODCALLTYPE MExecute(BSTR Cmd/*[in]*/, int* Status/*[out,retval]*/) = 0; // [4]
  virtual HRESULT STDMETHODCALLTYPE MReport(BSTR FileName/*[in]*/, int* Status/*[out,retval]*/) = 0; // [2]
  virtual HRESULT STDMETHODCALLTYPE MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/,
                                               BSTR* Object/*[out,retval]*/) = 0; // [3]
  virtual HRESULT STDMETHODCALLTYPE MGetVar(BSTR Name/*[in]*/, int T/*[in]*/,
                                            VARIANT* Value/*[out,retval]*/) = 0; // [5]
  virtual HRESULT STDMETHODCALLTYPE MStatus(int Type/*[in]*/, long* Nb/*[out]*/,
                                            BSTR* Name/*[out,retval]*/) = 0; // [6]
  virtual HRESULT STDMETHODCALLTYPE MGetMaxt(long* Value/*[out,retval]*/) = 0; // [8]
  virtual HRESULT STDMETHODCALLTYPE MGetFreq(long* Value/*[out,retval]*/) = 0; // [9]
  virtual HRESULT STDMETHODCALLTYPE MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/,
                                              long* Freq/*[out,retval]*/) = 0; // [10]
  virtual HRESULT STDMETHODCALLTYPE MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/,
                                            long* Freq/*[out,retval]*/) = 0; // [11]
  virtual HRESULT STDMETHODCALLTYPE MGetBeginYear(long* Value/*[out,retval]*/) = 0; // [12]
  virtual HRESULT STDMETHODCALLTYPE MGetBeginSub(long* Value/*[out,retval]*/) = 0; // [13]
  virtual HRESULT STDMETHODCALLTYPE MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/,
                                            long Length/*[in,def,opt]*/,
                                            LPSAFEARRAY* Value/*[out,retval]*/) = 0; // [15]
  virtual HRESULT STDMETHODCALLTYPE get_PSample(LPSAFEARRAY* Value/*[out,retval]*/) = 0; // [16]
  virtual HRESULT STDMETHODCALLTYPE MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/,
                                              LPSAFEARRAY* List/*[out,retval]*/) = 0; // [14]
  virtual HRESULT STDMETHODCALLTYPE MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/,
                                          int ToAnsi/*[in]*/, long Offset/*[in,def,opt]*/,
                                          LPSAFEARRAY* Res/*[out,retval]*/) = 0; // [19]
  virtual HRESULT STDMETHODCALLTYPE MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/,
                                            long Formatted/*[in,def,opt]*/,
                                            LPSAFEARRAY* Value/*[out,retval]*/) = 0; // [17]
  virtual HRESULT STDMETHODCALLTYPE get_PDebug(int* Value/*[out,retval]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE set_PDebug(int Value/*[in]*/) = 0; // [18]
  virtual HRESULT STDMETHODCALLTYPE MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/,
                                            long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/,
                                            LPSAFEARRAY* Value/*[out,retval]*/) = 0; // [7]
  virtual HRESULT STDMETHODCALLTYPE MOffset(BSTR Period/*[in]*/, int* Offset/*[out,retval]*/) = 0; // [20]
  virtual HRESULT STDMETHODCALLTYPE get_POEMToAnsi(int* Value/*[out,retval]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE set_POEMToAnsi(int Value/*[in]*/) = 0; // [21]
  virtual HRESULT STDMETHODCALLTYPE get_PError(BSTR* Value/*[out,retval]*/) = 0; // [22]
  virtual HRESULT STDMETHODCALLTYPE get_PCurrentDir(BSTR* Value/*[out,retval]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE set_PCurrentDir(BSTR Value/*[in]*/) = 0; // [23]
  virtual HRESULT STDMETHODCALLTYPE MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                                                long* Res/*[out,retval]*/) = 0; // [24]
  virtual HRESULT STDMETHODCALLTYPE MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                                               long* Res/*[out,retval]*/) = 0; // [25]
  virtual HRESULT STDMETHODCALLTYPE MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/,
                                                   BSTR Y/*[in]*/, BSTR Year/*[in]*/,
                                                   LPSAFEARRAY* Value/*[out,retval]*/) = 0; // [26]
  virtual HRESULT STDMETHODCALLTYPE get_PVersion(BSTR* Value/*[out,retval]*/) = 0; // [201]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  int __fastcall MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/)
  {
    int Status;
    OLECHECK(this->MWsLoad(FileName, Type, (int*)&Status));
    return Status;
  }

  int __fastcall MExecute(BSTR Cmd/*[in]*/)
  {
    int Status;
    OLECHECK(this->MExecute(Cmd, (int*)&Status));
    return Status;
  }

  int __fastcall MReport(BSTR FileName/*[in]*/)
  {
    int Status;
    OLECHECK(this->MReport(FileName, (int*)&Status));
    return Status;
  }

  BSTR __fastcall MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/)
  {
    BSTR Object = 0;
    OLECHECK(this->MGetObject(Name, Type, (BSTR*)&Object));
    return Object;
  }

  VARIANT __fastcall MGetVar(BSTR Name/*[in]*/, int T/*[in]*/)
  {
    VARIANT Value;
    OLECHECK(this->MGetVar(Name, T, (VARIANT*)&Value));
    return Value;
  }

  BSTR __fastcall MStatus(int Type/*[in]*/, long* Nb/*[out]*/)
  {
    BSTR Name = 0;
    OLECHECK(this->MStatus(Type, Nb, (BSTR*)&Name));
    return Name;
  }

  long __fastcall MGetMaxt(void)
  {
    long Value;
    OLECHECK(this->MGetMaxt((long*)&Value));
    return Value;
  }

  long __fastcall MGetFreq(void)
  {
    long Value;
    OLECHECK(this->MGetFreq((long*)&Value));
    return Value;
  }

  long __fastcall MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/)
  {
    long Freq;
    OLECHECK(this->MGetBegin(Year, Sub, (long*)&Freq));
    return Freq;
  }

  long __fastcall MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/)
  {
    long Freq;
    OLECHECK(this->MGetEnd(Year, Sub, (long*)&Freq));
    return Freq;
  }

  long __fastcall MGetBeginYear(void)
  {
    long Value;
    OLECHECK(this->MGetBeginYear((long*)&Value));
    return Value;
  }

  long __fastcall MGetBeginSub(void)
  {
    long Value;
    OLECHECK(this->MGetBeginSub((long*)&Value));
    return Value;
  }

  LPSAFEARRAY __fastcall MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/,
                                 long Length/*[in,def,opt]*/)
  {
    LPSAFEARRAY Value;
    OLECHECK(this->MVector(Name, Offset, Length, (LPSAFEARRAY*)&Value));
    return Value;
  }

  LPSAFEARRAY __fastcall get_PSample(void)
  {
    LPSAFEARRAY Value;
    OLECHECK(this->get_PSample((LPSAFEARRAY*)&Value));
    return Value;
  }

  LPSAFEARRAY __fastcall MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/)
  {
    LPSAFEARRAY List;
    OLECHECK(this->MContents(Type, Pattern, (LPSAFEARRAY*)&List));
    return List;
  }

  LPSAFEARRAY __fastcall MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                               long Offset/*[in,def,opt]*/)
  {
    LPSAFEARRAY Res;
    OLECHECK(this->MTest(Name, Formatted, ToAnsi, Offset, (LPSAFEARRAY*)&Res));
    return Res;
  }

  LPSAFEARRAY __fastcall MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/,
                                 long Formatted/*[in,def,opt]*/)
  {
    LPSAFEARRAY Value;
    OLECHECK(this->MGetTbl(Name, GSmpl, Formatted, (LPSAFEARRAY*)&Value));
    return Value;
  }

  int __fastcall get_PDebug(void)
  {
    int Value;
    OLECHECK(this->get_PDebug((int*)&Value));
    return Value;
  }

  LPSAFEARRAY __fastcall MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/,
                                 long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/)
  {
    LPSAFEARRAY Value;
    OLECHECK(this->MMatrix(List, WithNames, Offset, Length, (LPSAFEARRAY*)&Value));
    return Value;
  }

  int __fastcall MOffset(BSTR Period/*[in]*/)
  {
    int Offset;
    OLECHECK(this->MOffset(Period, (int*)&Offset));
    return Offset;
  }

  int __fastcall get_POEMToAnsi(void)
  {
    int Value;
    OLECHECK(this->get_POEMToAnsi((int*)&Value));
    return Value;
  }

  BSTR __fastcall get_PError(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PError((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_PCurrentDir(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PCurrentDir((BSTR*)&Value));
    return Value;
  }

  long __fastcall MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/)
  {
    long Res;
    OLECHECK(this->MUpdateVars(Offset, Value, (long*)&Res));
    return Res;
  }

  long __fastcall MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/)
  {
    long Res;
    OLECHECK(this->MUpdateObj(ObjType, Value, (long*)&Res));
    return Res;
  }

  LPSAFEARRAY __fastcall MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                        BSTR Year/*[in]*/)
  {
    LPSAFEARRAY Value;
    OLECHECK(this->MMatrixPattern(Pattern, X, Y, Year, (LPSAFEARRAY*)&Value));
    return Value;
  }

  BSTR __fastcall get_PVersion(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_PVersion((BSTR*)&Value));
    return Value;
  }


  __property   int             PDebug = {read = get_PDebug, write = set_PDebug};
  __property   int             POEMToAnsi = {read = get_POEMToAnsi, write = set_POEMToAnsi};
  __property   BSTR            PError = {read = get_PError};
  __property   BSTR            PCurrentDir = {read = get_PCurrentDir, write = set_PCurrentDir};
  __property   BSTR            PVersion = {read = get_PVersion};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMICCIode
// Interface: ICCIode
// *********************************************************************//
template <class T /* ICCIode */ >
class TCOMICCIodeT : public TComInterface<ICCIode>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICCIodeT() {}
  TCOMICCIodeT(ICCIode *intf, bool addRef = false) : TComInterface<ICCIode>(intf, addRef) {}
  TCOMICCIodeT(const TCOMICCIodeT& src) : TComInterface<ICCIode>(src) {}
  TCOMICCIodeT& operator=(const TCOMICCIodeT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/,
                                     int* Status/*[out,retval]*/);
  int             __fastcall MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/);
  HRESULT         __fastcall MExecute(BSTR Cmd/*[in]*/, int* Status/*[out,retval]*/);
  int             __fastcall MExecute(BSTR Cmd/*[in]*/);
  HRESULT         __fastcall MReport(BSTR FileName/*[in]*/, int* Status/*[out,retval]*/);
  int             __fastcall MReport(BSTR FileName/*[in]*/);
  HRESULT         __fastcall MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/,
                                        BSTR* Object/*[out,retval]*/);
  BSTR            __fastcall MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/);
  HRESULT         __fastcall MGetVar(BSTR Name/*[in]*/, int T/*[in]*/,
                                     VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall MGetVar(BSTR Name/*[in]*/, int T/*[in]*/);
  HRESULT         __fastcall MStatus(int Type/*[in]*/, long* Nb/*[out]*/, BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall MStatus(int Type/*[in]*/, long* Nb/*[out]*/);
  HRESULT         __fastcall MGetMaxt(long* Value/*[out,retval]*/);
  long            __fastcall MGetMaxt(void);
  HRESULT         __fastcall MGetFreq(long* Value/*[out,retval]*/);
  long            __fastcall MGetFreq(void);
  HRESULT         __fastcall MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/,
                                       long* Freq/*[out,retval]*/);
  long            __fastcall MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/);
  HRESULT         __fastcall MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/,
                                     long* Freq/*[out,retval]*/);
  long            __fastcall MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/);
  HRESULT         __fastcall MGetBeginYear(long* Value/*[out,retval]*/);
  long            __fastcall MGetBeginYear(void);
  HRESULT         __fastcall MGetBeginSub(long* Value/*[out,retval]*/);
  long            __fastcall MGetBeginSub(void);
  HRESULT         __fastcall MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/,
                                     long Length/*[in,def,opt]*/, LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/,
                                     long Length/*[in,def,opt]*/);
  HRESULT         __fastcall get_PSample(LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_PSample(void);
  HRESULT         __fastcall MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/,
                                       LPSAFEARRAY* List/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/);
  HRESULT         __fastcall MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                                   long Offset/*[in,def,opt]*/, LPSAFEARRAY* Res/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                                   long Offset/*[in,def,opt]*/);
  HRESULT         __fastcall MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/,
                                     long Formatted/*[in,def,opt]*/,
                                     LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/,
                                     long Formatted/*[in,def,opt]*/);
  HRESULT         __fastcall get_PDebug(int* Value/*[out,retval]*/);
  int             __fastcall get_PDebug(void);
  HRESULT         __fastcall set_PDebug(int Value/*[in]*/);
  HRESULT         __fastcall MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/,
                                     long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/,
                                     LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/,
                                     long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/);
  HRESULT         __fastcall MOffset(BSTR Period/*[in]*/, int* Offset/*[out,retval]*/);
  int             __fastcall MOffset(BSTR Period/*[in]*/);
  HRESULT         __fastcall get_POEMToAnsi(int* Value/*[out,retval]*/);
  int             __fastcall get_POEMToAnsi(void);
  HRESULT         __fastcall set_POEMToAnsi(int Value/*[in]*/);
  HRESULT         __fastcall get_PError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PError(void);
  HRESULT         __fastcall get_PCurrentDir(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PCurrentDir(void);
  HRESULT         __fastcall set_PCurrentDir(BSTR Value/*[in]*/);
  HRESULT         __fastcall MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                                         long* Res/*[out,retval]*/);
  long            __fastcall MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/);
  HRESULT         __fastcall MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                                        long* Res/*[out,retval]*/);
  long            __fastcall MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/);
  HRESULT         __fastcall MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                            BSTR Year/*[in]*/, LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                            BSTR Year/*[in]*/);
  HRESULT         __fastcall get_PVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PVersion(void);

  __property   int             PDebug = {read = get_PDebug, write = set_PDebug};
  __property   int             POEMToAnsi = {read = get_POEMToAnsi, write = set_POEMToAnsi};
  __property   BSTR            PError = {read = get_PError};
  __property   BSTR            PCurrentDir = {read = get_PCurrentDir, write = set_PCurrentDir};
  __property   BSTR            PVersion = {read = get_PVersion};
};
typedef TCOMICCIodeT<ICCIode> TCOMICCIode;

// *********************************************************************//
// DispIntf:  ICCIode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {093A7EC1-D7E8-11D4-9BB9-0001025007D6}
// *********************************************************************//
template<class T>
class ICCIodeDispT : public TAutoDriver<ICCIode>
{
public:
  ICCIodeDispT(){}

  ICCIodeDispT(ICCIode *pintf)
  {
    TAutoDriver<ICCIode>::Bind(pintf, false);
  }

  ICCIodeDispT(ICCIodePtr pintf)
  {
    TAutoDriver<ICCIode>::Bind(pintf, true);
  }

  ICCIodeDispT& operator=(ICCIode *pintf)
  {
    TAutoDriver<ICCIode>::Bind(pintf, false);
    return *this;
  }

  ICCIodeDispT& operator=(ICCIodePtr pintf)
  {
    TAutoDriver<ICCIode>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CCIode));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CCIode);
  }

  HRESULT         __fastcall MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/,
                                     int* Status/*[out,retval]*/);
  int             __fastcall MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/);
  HRESULT         __fastcall MExecute(BSTR Cmd/*[in]*/, int* Status/*[out,retval]*/);
  int             __fastcall MExecute(BSTR Cmd/*[in]*/);
  HRESULT         __fastcall MReport(BSTR FileName/*[in]*/, int* Status/*[out,retval]*/);
  int             __fastcall MReport(BSTR FileName/*[in]*/);
  HRESULT         __fastcall MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/,
                                        BSTR* Object/*[out,retval]*/);
  BSTR            __fastcall MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/);
  HRESULT         __fastcall MGetVar(BSTR Name/*[in]*/, int T/*[in]*/,
                                     VARIANT* Value/*[out,retval]*/);
  VARIANT         __fastcall MGetVar(BSTR Name/*[in]*/, int T/*[in]*/);
  HRESULT         __fastcall MStatus(int Type/*[in]*/, long* Nb/*[out]*/, BSTR* Name/*[out,retval]*/);
  BSTR            __fastcall MStatus(int Type/*[in]*/, long* Nb/*[out]*/);
  HRESULT         __fastcall MGetMaxt(long* Value/*[out,retval]*/);
  long            __fastcall MGetMaxt(void);
  HRESULT         __fastcall MGetFreq(long* Value/*[out,retval]*/);
  long            __fastcall MGetFreq(void);
  HRESULT         __fastcall MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/,
                                       long* Freq/*[out,retval]*/);
  long            __fastcall MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/);
  HRESULT         __fastcall MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/,
                                     long* Freq/*[out,retval]*/);
  long            __fastcall MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/);
  HRESULT         __fastcall MGetBeginYear(long* Value/*[out,retval]*/);
  long            __fastcall MGetBeginYear(void);
  HRESULT         __fastcall MGetBeginSub(long* Value/*[out,retval]*/);
  long            __fastcall MGetBeginSub(void);
  HRESULT         __fastcall MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/,
                                     long Length/*[in,def,opt]*/, LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/,
                                     long Length/*[in,def,opt]*/);
  HRESULT         __fastcall get_PSample(LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall get_PSample(void);
  HRESULT         __fastcall MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/,
                                       LPSAFEARRAY* List/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/);
  HRESULT         __fastcall MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                                   long Offset/*[in,def,opt]*/, LPSAFEARRAY* Res/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                                   long Offset/*[in,def,opt]*/);
  HRESULT         __fastcall MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/,
                                     long Formatted/*[in,def,opt]*/,
                                     LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/,
                                     long Formatted/*[in,def,opt]*/);
  HRESULT         __fastcall get_PDebug(int* Value/*[out,retval]*/);
  int             __fastcall get_PDebug(void);
  HRESULT         __fastcall set_PDebug(int Value/*[in]*/);
  HRESULT         __fastcall MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/,
                                     long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/,
                                     LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/,
                                     long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/);
  HRESULT         __fastcall MOffset(BSTR Period/*[in]*/, int* Offset/*[out,retval]*/);
  int             __fastcall MOffset(BSTR Period/*[in]*/);
  HRESULT         __fastcall get_POEMToAnsi(int* Value/*[out,retval]*/);
  int             __fastcall get_POEMToAnsi(void);
  HRESULT         __fastcall set_POEMToAnsi(int Value/*[in]*/);
  HRESULT         __fastcall get_PError(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PError(void);
  HRESULT         __fastcall get_PCurrentDir(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PCurrentDir(void);
  HRESULT         __fastcall set_PCurrentDir(BSTR Value/*[in]*/);
  HRESULT         __fastcall MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                                         long* Res/*[out,retval]*/);
  long            __fastcall MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/);
  HRESULT         __fastcall MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                                        long* Res/*[out,retval]*/);
  long            __fastcall MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/);
  HRESULT         __fastcall MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                            BSTR Year/*[in]*/, LPSAFEARRAY* Value/*[out,retval]*/);
  LPSAFEARRAY     __fastcall MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                            BSTR Year/*[in]*/);
  HRESULT         __fastcall get_PVersion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_PVersion(void);

  __property   int             PDebug = {read = get_PDebug, write = set_PDebug};
  __property   int             POEMToAnsi = {read = get_POEMToAnsi, write = set_POEMToAnsi};
  __property   BSTR            PError = {read = get_PError};
  __property   BSTR            PCurrentDir = {read = get_PCurrentDir, write = set_PCurrentDir};
  __property   BSTR            PVersion = {read = get_PVersion};
};
typedef ICCIodeDispT<ICCIode> ICCIodeDisp;

// *********************************************************************//
// SmartIntf: TCOMICCIode
// Interface: ICCIode
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/, int* Status/*[out,retval]*/)
{
  return (*this)->MWsLoad(FileName, Type, Status);
}

template <class T> int __fastcall
TCOMICCIodeT<T>::MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/)
{
  int Status;
  OLECHECK(this->MWsLoad(FileName/*[in]*/, Type/*[in]*/, (int*)&Status));
  return Status;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MExecute(BSTR Cmd/*[in]*/, int* Status/*[out,retval]*/)
{
  return (*this)->MExecute(Cmd, Status);
}

template <class T> int __fastcall
TCOMICCIodeT<T>::MExecute(BSTR Cmd/*[in]*/)
{
  int Status;
  OLECHECK(this->MExecute(Cmd/*[in]*/, (int*)&Status));
  return Status;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MReport(BSTR FileName/*[in]*/, int* Status/*[out,retval]*/)
{
  return (*this)->MReport(FileName, Status);
}

template <class T> int __fastcall
TCOMICCIodeT<T>::MReport(BSTR FileName/*[in]*/)
{
  int Status;
  OLECHECK(this->MReport(FileName/*[in]*/, (int*)&Status));
  return Status;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/, BSTR* Object/*[out,retval]*/)
{
  return (*this)->MGetObject(Name, Type, Object);
}

template <class T> BSTR __fastcall
TCOMICCIodeT<T>::MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/)
{
  BSTR Object = 0;
  OLECHECK(this->MGetObject(Name/*[in]*/, Type/*[in]*/, (BSTR*)&Object));
  return Object;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetVar(BSTR Name/*[in]*/, int T/*[in]*/, VARIANT* Value/*[out,retval]*/)
{
  return (*this)->MGetVar(Name, T, Value);
}

template <class T> VARIANT __fastcall
TCOMICCIodeT<T>::MGetVar(BSTR Name/*[in]*/, int T/*[in]*/)
{
  VARIANT Value;
  OLECHECK(this->MGetVar(Name/*[in]*/, T/*[in]*/, (VARIANT*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MStatus(int Type/*[in]*/, long* Nb/*[out]*/, BSTR* Name/*[out,retval]*/)
{
  return (*this)->MStatus(Type, Nb, Name);
}

template <class T> BSTR __fastcall
TCOMICCIodeT<T>::MStatus(int Type/*[in]*/, long* Nb/*[out]*/)
{
  BSTR Name = 0;
  OLECHECK(this->MStatus(Type/*[in]*/, Nb/*[out]*/, (BSTR*)&Name));
  return Name;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetMaxt(long* Value/*[out,retval]*/)
{
  return (*this)->MGetMaxt(Value);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MGetMaxt(void)
{
  long Value;
  OLECHECK(this->MGetMaxt((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetFreq(long* Value/*[out,retval]*/)
{
  return (*this)->MGetFreq(Value);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MGetFreq(void)
{
  long Value;
  OLECHECK(this->MGetFreq((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/, long* Freq/*[out,retval]*/)
{
  return (*this)->MGetBegin(Year, Sub, Freq);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/)
{
  long Freq;
  OLECHECK(this->MGetBegin(Year/*[out]*/, Sub/*[out]*/, (long*)&Freq));
  return Freq;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/, long* Freq/*[out,retval]*/)
{
  return (*this)->MGetEnd(Year, Sub, Freq);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/)
{
  long Freq;
  OLECHECK(this->MGetEnd(Year/*[out]*/, Sub/*[out]*/, (long*)&Freq));
  return Freq;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetBeginYear(long* Value/*[out,retval]*/)
{
  return (*this)->MGetBeginYear(Value);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MGetBeginYear(void)
{
  long Value;
  OLECHECK(this->MGetBeginYear((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetBeginSub(long* Value/*[out,retval]*/)
{
  return (*this)->MGetBeginSub(Value);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MGetBeginSub(void)
{
  long Value;
  OLECHECK(this->MGetBeginSub((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/,
                         LPSAFEARRAY* Value/*[out,retval]*/)
{
  return (*this)->MVector(Name, Offset, Length, Value);
}

template <class T> LPSAFEARRAY __fastcall
TCOMICCIodeT<T>::MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/)
{
  LPSAFEARRAY Value;
  OLECHECK(this->MVector(Name/*[in]*/, Offset/*[in,def,opt]*/, Length/*[in,def,opt]*/, (LPSAFEARRAY*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::get_PSample(LPSAFEARRAY* Value/*[out,retval]*/)
{
  return (*this)->get_PSample(Value);
}

template <class T> LPSAFEARRAY __fastcall
TCOMICCIodeT<T>::get_PSample(void)
{
  LPSAFEARRAY Value;
  OLECHECK(this->get_PSample((LPSAFEARRAY*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/, LPSAFEARRAY* List/*[out,retval]*/)
{
  return (*this)->MContents(Type, Pattern, List);
}

template <class T> LPSAFEARRAY __fastcall
TCOMICCIodeT<T>::MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/)
{
  LPSAFEARRAY List;
  OLECHECK(this->MContents(Type/*[in]*/, Pattern/*[in]*/, (LPSAFEARRAY*)&List));
  return List;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                       long Offset/*[in,def,opt]*/, LPSAFEARRAY* Res/*[out,retval]*/)
{
  return (*this)->MTest(Name, Formatted, ToAnsi, Offset, Res);
}

template <class T> LPSAFEARRAY __fastcall
TCOMICCIodeT<T>::MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                       long Offset/*[in,def,opt]*/)
{
  LPSAFEARRAY Res;
  OLECHECK(this->MTest(Name/*[in]*/, Formatted/*[in]*/, ToAnsi/*[in]*/, Offset/*[in,def,opt]*/, (LPSAFEARRAY*)&Res));
  return Res;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/, long Formatted/*[in,def,opt]*/,
                         LPSAFEARRAY* Value/*[out,retval]*/)
{
  return (*this)->MGetTbl(Name, GSmpl, Formatted, Value);
}

template <class T> LPSAFEARRAY __fastcall
TCOMICCIodeT<T>::MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/, long Formatted/*[in,def,opt]*/)
{
  LPSAFEARRAY Value;
  OLECHECK(this->MGetTbl(Name/*[in]*/, GSmpl/*[in]*/, Formatted/*[in,def,opt]*/, (LPSAFEARRAY*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::get_PDebug(int* Value/*[out,retval]*/)
{
  return (*this)->get_PDebug(Value);
}

template <class T> int __fastcall
TCOMICCIodeT<T>::get_PDebug(void)
{
  int Value;
  OLECHECK(this->get_PDebug((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::set_PDebug(int Value/*[in]*/)
{
  return (*this)->set_PDebug(Value);
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/, long Offset/*[in,def,opt]*/,
                         long Length/*[in,def,opt]*/, LPSAFEARRAY* Value/*[out,retval]*/)
{
  return (*this)->MMatrix(List, WithNames, Offset, Length, Value);
}

template <class T> LPSAFEARRAY __fastcall
TCOMICCIodeT<T>::MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/, long Offset/*[in,def,opt]*/,
                         long Length/*[in,def,opt]*/)
{
  LPSAFEARRAY Value;
  OLECHECK(this->MMatrix(List/*[in]*/, WithNames/*[in]*/, Offset/*[in,def,opt]*/,
                         Length/*[in,def,opt]*/, (LPSAFEARRAY*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MOffset(BSTR Period/*[in]*/, int* Offset/*[out,retval]*/)
{
  return (*this)->MOffset(Period, Offset);
}

template <class T> int __fastcall
TCOMICCIodeT<T>::MOffset(BSTR Period/*[in]*/)
{
  int Offset;
  OLECHECK(this->MOffset(Period/*[in]*/, (int*)&Offset));
  return Offset;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::get_POEMToAnsi(int* Value/*[out,retval]*/)
{
  return (*this)->get_POEMToAnsi(Value);
}

template <class T> int __fastcall
TCOMICCIodeT<T>::get_POEMToAnsi(void)
{
  int Value;
  OLECHECK(this->get_POEMToAnsi((int*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::set_POEMToAnsi(int Value/*[in]*/)
{
  return (*this)->set_POEMToAnsi(Value);
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::get_PError(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PError(Value);
}

template <class T> BSTR __fastcall
TCOMICCIodeT<T>::get_PError(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PError((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::get_PCurrentDir(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PCurrentDir(Value);
}

template <class T> BSTR __fastcall
TCOMICCIodeT<T>::get_PCurrentDir(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PCurrentDir((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::set_PCurrentDir(BSTR Value/*[in]*/)
{
  return (*this)->set_PCurrentDir(Value);
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                             long* Res/*[out,retval]*/)
{
  return (*this)->MUpdateVars(Offset, Value, Res);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/)
{
  long Res;
  OLECHECK(this->MUpdateVars(Offset/*[in]*/, Value/*[in]*/, (long*)&Res));
  return Res;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                            long* Res/*[out,retval]*/)
{
  return (*this)->MUpdateObj(ObjType, Value, Res);
}

template <class T> long __fastcall
TCOMICCIodeT<T>::MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/)
{
  long Res;
  OLECHECK(this->MUpdateObj(ObjType/*[in]*/, Value/*[in]*/, (long*)&Res));
  return Res;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                BSTR Year/*[in]*/, LPSAFEARRAY* Value/*[out,retval]*/)
{
  return (*this)->MMatrixPattern(Pattern, X, Y, Year, Value);
}

template <class T> LPSAFEARRAY __fastcall
TCOMICCIodeT<T>::MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                BSTR Year/*[in]*/)
{
  LPSAFEARRAY Value;
  OLECHECK(this->MMatrixPattern(Pattern/*[in]*/, X/*[in]*/, Y/*[in]*/, Year/*[in]*/, (LPSAFEARRAY*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICCIodeT<T>::get_PVersion(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_PVersion(Value);
}

template <class T> BSTR __fastcall
TCOMICCIodeT<T>::get_PVersion(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_PVersion((BSTR*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  ICCIode
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {093A7EC1-D7E8-11D4-9BB9-0001025007D6}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/, int* Status/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MWsLoad"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = Type /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Status /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
ICCIodeDispT<T>::MWsLoad(BSTR FileName/*[in]*/, int Type/*[in]*/)
{
  int Status;
  this->MWsLoad(FileName, Type, (int*)&Status);
  return Status;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MExecute(BSTR Cmd/*[in]*/, int* Status/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MExecute"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Cmd /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Status /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
ICCIodeDispT<T>::MExecute(BSTR Cmd/*[in]*/)
{
  int Status;
  this->MExecute(Cmd, (int*)&Status);
  return Status;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MReport(BSTR FileName/*[in]*/, int* Status/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MReport"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Status /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
ICCIodeDispT<T>::MReport(BSTR FileName/*[in]*/)
{
  int Status;
  this->MReport(FileName, (int*)&Status);
  return Status;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/, BSTR* Object/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetObject"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Type /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Object /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ICCIodeDispT<T>::MGetObject(BSTR Name/*[in]*/, int Type/*[in]*/)
{
  BSTR Object;
  this->MGetObject(Name, Type, (BSTR*)&Object);
  return Object;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetVar(BSTR Name/*[in]*/, int T/*[in]*/, VARIANT* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetVar"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = T /*[VT_INT:0]*/;
  return OutRetValSetterPtr(Value /*[VT_VARIANT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT __fastcall
ICCIodeDispT<T>::MGetVar(BSTR Name/*[in]*/, int T/*[in]*/)
{
  VARIANT Value;
  this->MGetVar(Name, T, (VARIANT*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MStatus(int Type/*[in]*/, long* Nb/*[out]*/, BSTR* Name/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MStatus"), DISPID(6));
  TAutoArgs<2> _args;
  _args[1] = Type /*[VT_INT:0]*/;
  _args[2] = Nb /*[VT_I4:1]*/;
  return OutRetValSetterPtr(Name /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
ICCIodeDispT<T>::MStatus(int Type/*[in]*/, long* Nb/*[out]*/)
{
  BSTR Name;
  this->MStatus(Type, Nb, (BSTR*)&Name);
  return Name;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetMaxt(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetMaxt"), DISPID(8));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MGetMaxt(void)
{
  long Value;
  this->MGetMaxt((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetFreq(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetFreq"), DISPID(9));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MGetFreq(void)
{
  long Value;
  this->MGetFreq((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/, long* Freq/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetBegin"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = Year /*[VT_I4:1]*/;
  _args[2] = Sub /*[VT_I4:1]*/;
  return OutRetValSetterPtr(Freq /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MGetBegin(long* Year/*[out]*/, long* Sub/*[out]*/)
{
  long Freq;
  this->MGetBegin(Year, Sub, (long*)&Freq);
  return Freq;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/, long* Freq/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetEnd"), DISPID(11));
  TAutoArgs<2> _args;
  _args[1] = Year /*[VT_I4:1]*/;
  _args[2] = Sub /*[VT_I4:1]*/;
  return OutRetValSetterPtr(Freq /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MGetEnd(long* Year/*[out]*/, long* Sub/*[out]*/)
{
  long Freq;
  this->MGetEnd(Year, Sub, (long*)&Freq);
  return Freq;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetBeginYear(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetBeginYear"), DISPID(12));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MGetBeginYear(void)
{
  long Value;
  this->MGetBeginYear((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetBeginSub(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetBeginSub"), DISPID(13));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MGetBeginSub(void)
{
  long Value;
  this->MGetBeginSub((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/
                         , LPSAFEARRAY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MVector"), DISPID(15));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Offset /*[VT_I4:0]*/;
  _args[3] = Length /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
ICCIodeDispT<T>::MVector(BSTR Name/*[in]*/, long Offset/*[in,def,opt]*/, long Length/*[in,def,opt]*/)
{
  LPSAFEARRAY Value;
  this->MVector(Name, Offset, Length, (LPSAFEARRAY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::get_PSample(LPSAFEARRAY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PSample"), DISPID(16));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_SAFEARRAY:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
ICCIodeDispT<T>::get_PSample(void)
{
  LPSAFEARRAY Value;
  this->get_PSample((LPSAFEARRAY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/, LPSAFEARRAY* List/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MContents"), DISPID(14));
  TAutoArgs<2> _args;
  _args[1] = Type /*[VT_INT:0]*/;
  _args[2] = Pattern /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(List /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
ICCIodeDispT<T>::MContents(int Type/*[in]*/, BSTR Pattern/*[in]*/)
{
  LPSAFEARRAY List;
  this->MContents(Type, Pattern, (LPSAFEARRAY*)&List);
  return List;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                       long Offset/*[in,def,opt]*/, LPSAFEARRAY* Res/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MTest"), DISPID(19));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = Formatted /*[VT_INT:0]*/;
  _args[3] = ToAnsi /*[VT_INT:0]*/;
  _args[4] = Offset /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Res /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
ICCIodeDispT<T>::MTest(BSTR Name/*[in]*/, int Formatted/*[in]*/, int ToAnsi/*[in]*/,
                       long Offset/*[in,def,opt]*/)
{
  LPSAFEARRAY Res;
  this->MTest(Name, Formatted, ToAnsi, Offset, (LPSAFEARRAY*)&Res);
  return Res;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/, long Formatted/*[in,def,opt]*/,
                         LPSAFEARRAY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MGetTbl"), DISPID(17));
  TAutoArgs<3> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = GSmpl /*[VT_BSTR:0]*/;
  _args[3] = Formatted /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
ICCIodeDispT<T>::MGetTbl(BSTR Name/*[in]*/, BSTR GSmpl/*[in]*/, long Formatted/*[in,def,opt]*/)
{
  LPSAFEARRAY Value;
  this->MGetTbl(Name, GSmpl, Formatted, (LPSAFEARRAY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::get_PDebug(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PDebug"), DISPID(18));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ICCIodeDispT<T>::get_PDebug(void)
{
  int Value;
  this->get_PDebug((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::set_PDebug(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PDebug"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/, long Offset/*[in,def,opt]*/,
                         long Length/*[in,def,opt]*/, LPSAFEARRAY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MMatrix"), DISPID(7));
  TAutoArgs<4> _args;
  _args[1] = List /*[VT_BSTR:0]*/;
  _args[2] = WithNames /*[VT_INT:0]*/;
  _args[3] = Offset /*[VT_I4:0]*/;
  _args[4] = Length /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Value /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
ICCIodeDispT<T>::MMatrix(BSTR List/*[in]*/, int WithNames/*[in]*/, long Offset/*[in,def,opt]*/,
                         long Length/*[in,def,opt]*/)
{
  LPSAFEARRAY Value;
  this->MMatrix(List, WithNames, Offset, Length, (LPSAFEARRAY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MOffset(BSTR Period/*[in]*/, int* Offset/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MOffset"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Period /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Offset /*[VT_INT:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> int __fastcall
ICCIodeDispT<T>::MOffset(BSTR Period/*[in]*/)
{
  int Offset;
  this->MOffset(Period, (int*)&Offset);
  return Offset;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::get_POEMToAnsi(int* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("POEMToAnsi"), DISPID(21));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_INT:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> int __fastcall
ICCIodeDispT<T>::get_POEMToAnsi(void)
{
  int Value;
  this->get_POEMToAnsi((int*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::set_POEMToAnsi(int Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("POEMToAnsi"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_INT:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::get_PError(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PError"), DISPID(22));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICCIodeDispT<T>::get_PError(void)
{
  BSTR Value;
  this->get_PError((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::get_PCurrentDir(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCurrentDir"), DISPID(23));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICCIodeDispT<T>::get_PCurrentDir(void)
{
  BSTR Value;
  this->get_PCurrentDir((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::set_PCurrentDir(BSTR Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PCurrentDir"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                             long* Res/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MUpdateVars"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = Offset /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_SAFEARRAY:0]*/;
  return OutRetValSetterPtr(Res /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MUpdateVars(long Offset/*[in]*/, LPSAFEARRAY Value/*[in]*/)
{
  long Res;
  this->MUpdateVars(Offset, Value, (long*)&Res);
  return Res;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/,
                            long* Res/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MUpdateObj"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = ObjType /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_SAFEARRAY:0]*/;
  return OutRetValSetterPtr(Res /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
ICCIodeDispT<T>::MUpdateObj(long ObjType/*[in]*/, LPSAFEARRAY Value/*[in]*/)
{
  long Res;
  this->MUpdateObj(ObjType, Value, (long*)&Res);
  return Res;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                BSTR Year/*[in]*/, LPSAFEARRAY* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MMatrixPattern"), DISPID(26));
  TAutoArgs<4> _args;
  _args[1] = Pattern /*[VT_BSTR:0]*/;
  _args[2] = X /*[VT_BSTR:0]*/;
  _args[3] = Y /*[VT_BSTR:0]*/;
  _args[4] = Year /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Value /*[VT_SAFEARRAY:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> LPSAFEARRAY __fastcall
ICCIodeDispT<T>::MMatrixPattern(BSTR Pattern/*[in]*/, BSTR X/*[in]*/, BSTR Y/*[in]*/,
                                BSTR Year/*[in]*/)
{
  LPSAFEARRAY Value;
  this->MMatrixPattern(Pattern, X, Y, Year, (LPSAFEARRAY*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICCIodeDispT<T>::get_PVersion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PVersion"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
ICCIodeDispT<T>::get_PVersion(void)
{
  BSTR Value;
  this->get_PVersion((BSTR*)&Value);
  return Value;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that
// provide static Create() and CreateRemote(LPWSTR machineName) methods
// for creating an instance of an exposed object. These functions can
// be used by client wishing to automate CoClasses exposed by this
// typelibrary.
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CCIode
// Interface: TCOMICCIode
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICCIode, ICCIode, &CLSID_CCIode, &IID_ICCIode> CoCCIode;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Iodecom_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Iodecom_tlb;
#endif

#pragma option pop

#endif // IodeCom_TLBH

