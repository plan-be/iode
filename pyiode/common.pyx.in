# distutils: language = c++

from typing import List, Dict

from libcpp.string cimport string
from libcpp.vector cimport vector
from libcpp.map cimport map

from pyiode.common cimport L_NAN, I_NB_TYPES, EQS_NBTESTS
from pyiode.common cimport (EnumIodeType, EnumIodeFile, EnumLang, EnumIodeEquationMethod, 
                            EnumIodeEquationTest, EnumIodeLtoH, EnumIodeHtoL, 
                            EnumCellType, EnumCellAlign, EnumCellFont, EnumLineType, 
                            EnumGraphAlign, EnumGraphAxis, EnumGraphGrid, EnumGraphType, 
                            EnumIodeVarMode, EnumSimulationInitialization)
from pyiode.common cimport (vIodeTypes, v_ext_names, vLangs, v_eq_methods, v_var_modes, 
                            v_simulation_initialization, mLowToHigh)

try:
    import pandas as pd
    DataFrame = pd.DataFrame
except ImportError:
    pd = None
    DataFrame = Any

try:
    import larray as la
    Array = la.Array
    Axis = la.Axis
except ImportError:
    la = None
    Array = Any
    Axis = Any


# The function below exists because Cython seems to refuse to iterate over 
# a const std container except in a function or method
def _cpp_string_vector_to_py(vector[string] vec) -> List[str]:
    return [value.decode() for value in vec]

# The function below exists because Cython seems to refuse to iterate over 
# a const std container except in a function or method
def _cpp_char_string_map_to_py(map[char, string] c_map) ->Dict[str, str]:
    return {chr(item.first): item.second.decode() for item in c_map}


# VERSION
# -------
__version__ = "${CMAKE_PROJECT_VERSION}"


# IODE CONSTANTS
# --------------
nan: float = L_NAN

COMMENTS: int = EnumIodeType.I_COMMENTS
EQUATIONS: int = EnumIodeType.I_EQUATIONS
IDENTITIES: int = EnumIodeType.I_IDENTITIES
LISTS: int = EnumIodeType.I_LISTS
SCALARS: int = EnumIodeType.I_SCALARS
TABLES: int = EnumIodeType.I_TABLES
VARIABLES: int = EnumIodeType.I_VARIABLES

NB_TYPES: int = I_NB_TYPES
IODE_TYPES_LIST = _cpp_string_vector_to_py(vIodeTypes)

FILE_COMMENTS: int = EnumIodeFile.I_COMMENTS_FILE
FILE_EQUATIONS: int = EnumIodeFile.I_EQUATIONS_FILE
FILE_IDENTITIES: int = EnumIodeFile.I_IDENTITIES_FILE
FILE_LISTS: int = EnumIodeFile.I_LISTS_FILE
FILE_SCALARS: int = EnumIodeFile.I_SCALARS_FILE
FILE_TABLES: int = EnumIodeFile.I_TABLES_FILE
FILE_VARIABLES: int = EnumIodeFile.I_VARIABLES_FILE
FILE_REPORTS: int = EnumIodeFile.I_REPORTS_FILE
FILE_TEXT: int = EnumIodeFile.I_TEXT_FILE
FILE_ASCII: int = EnumIodeFile.I_ASCII_FILE
FILE_A2M: int = EnumIodeFile.I_A2M_FILE
FILE_RTF: int = EnumIodeFile.I_RTF_FILE
FILE_HTML: int = EnumIodeFile.I_HTML_FILE
FILE_MIF: int = EnumIodeFile.I_MIF_FILE
FILE_CSV: int = EnumIodeFile.I_CSV_FILE
FILE_REF: int = EnumIodeFile.I_REF_FILE
FILE_AGL: int = EnumIodeFile.I_AGL_FILE
FILE_DIF: int = EnumIodeFile.I_DIF_FILE
FILE_LOGS: int = EnumIodeFile.I_LOGS_FILE
FILE_SETTINGS: int = EnumIodeFile.I_SETTINGS_FILE
FILE_ANY: int = EnumIodeFile.I_ANY_FILE
FILE_DIRECTORY: int = EnumIodeFile.I_DIRECTORY

IODE_FILE_TYPES_LIST = _cpp_string_vector_to_py(v_ext_names)

LANG_ENGLISH: int = EnumLang.IT_ENGLISH
LANG_DUTCH: int = EnumLang.IT_DUTCH
LANG_FRENCH: int = EnumLang.IT_FRENCH

LANGS_LIST = _cpp_string_vector_to_py(vLangs)

EQ_METHOD_LSQ: int = EnumIodeEquationMethod.IE_LSQ
EQ_METHOD_ZELLNER: int = EnumIodeEquationMethod.IE_ZELLNER
EQ_METHOD_INSTRUMENTAL: int = EnumIodeEquationMethod.IE_INSTRUMENTAL
EQ_METHOD_GLS: int = EnumIodeEquationMethod.IE_GLS
EQ_METHOD_MAX_LIKELIHOOD: int = EnumIodeEquationMethod.IE_MAX_LIKELIHOOD

EQUATION_METHODS = _cpp_string_vector_to_py(v_eq_methods)

EQ_TEST_CORR: int = EnumIodeEquationTest.IE_CORR
EQ_TEST_STDEV: int = EnumIodeEquationTest.IE_STDEV
EQ_TEST_MEANY: int = EnumIodeEquationTest.IE_MEANY
EQ_TEST_SSRES: int = EnumIodeEquationTest.IE_SSRES
EQ_TEST_STDERR: int = EnumIodeEquationTest.IE_STDERR
EQ_TEST_STDERRP: int = EnumIodeEquationTest.IE_STDERRP
EQ_TEST_FSTAT: int = EnumIodeEquationTest.IE_FSTAT
EQ_TEST_R2: int = EnumIodeEquationTest.IE_R2
EQ_TEST_R2ADJ: int = EnumIodeEquationTest.IE_R2ADJ
EQ_TEST_DW: int = EnumIodeEquationTest.IE_DW
EQ_TEST_LOGLIK: int = EnumIodeEquationTest.IE_LOGLIK

EQ_NB_TESTS: int = EQS_NBTESTS

CELL_TYPE_LEC: int = EnumCellType.IT_LEC
CELL_TYPE_STRING: int = EnumCellType.IT_STRING

CELL_TYPE_DICT = {CELL_TYPE_LEC: "LEC", CELL_TYPE_STRING: "STRING"}
CELL_TYPE_REV_DICT = {value: key for key, value in CELL_TYPE_DICT.items()}

CELL_FONT_NORMAL: int = EnumCellFont.IT_NORMAL
CELL_FONT_BOLD: int = EnumCellFont.IT_BOLD
CELL_FONT_ITALIC: int = EnumCellFont.IT_ITALIC
CELL_FONT_UNDERLINE: int = EnumCellFont.IT_UNDERLINE

CELL_FONT_DICT = {CELL_FONT_NORMAL: "normal", CELL_FONT_BOLD: "bold", 
                  CELL_FONT_ITALIC: "italic", CELL_FONT_UNDERLINE: "underline"}
CELL_FONT_REV_DICT = {value: key for key, value in CELL_FONT_DICT.items()}

CELL_ALIGN_CENTER: int = EnumCellAlign.IT_CENTER
CELL_ALIGN_LEFT: int = EnumCellAlign.IT_LEFT
CELL_ALIGN_RIGHT: int = EnumCellAlign.IT_RIGHT
CELL_ALIGN_DECIMAL: int = EnumCellAlign.IT_DECIMAL

CELL_ALIGN_DICT = {CELL_ALIGN_CENTER: "center", CELL_ALIGN_LEFT: "left", 
                   CELL_ALIGN_RIGHT: "right", CELL_ALIGN_DECIMAL: "decimal"}
CELL_ALIGN_REV_DICT = {value: key for key, value in CELL_ALIGN_DICT.items()}

LINE_TYPE_FILES: int = EnumLineType.IT_FILES
LINE_TYPE_MODE: int = EnumLineType.IT_MODE
LINE_TYPE_CELL: int = EnumLineType.IT_CELL
LINE_TYPE_LINE: int = EnumLineType.IT_LINE
LINE_TYPE_TITLE: int = EnumLineType.IT_TITLE
LINE_TYPE_DATE: int = EnumLineType.IT_DATE

LINE_TYPE_DICT = {LINE_TYPE_FILES: "FILES", LINE_TYPE_MODE: "MODE", LINE_TYPE_CELL: "CELL", 
                  LINE_TYPE_LINE: "LINE", LINE_TYPE_TITLE: "TITLE", LINE_TYPE_DATE: "DATE"}
LINE_TYPE_REV_DICT = {value: key for key, value in LINE_TYPE_DICT.items()}

GRAPH_TYPE_LINE: int = EnumGraphType.IG_LINE
GRAPH_TYPE_SCATTER: int = EnumGraphType.IG_SCATTER
GRAPH_TYPE_BAR: int = EnumGraphType.IG_BAR

GRAPH_TYPE_DICT = {GRAPH_TYPE_LINE: "line", GRAPH_TYPE_SCATTER: "scatter", GRAPH_TYPE_BAR: "bar"}
GRAPH_TYPE_REV_DICT = {value: key for key, value in GRAPH_TYPE_DICT.items()}

GRAPH_GRID_MAJOR: int = EnumGraphGrid.IG_MAJOR
GRAPH_GRID_NONE: int = EnumGraphGrid.IG_NONE
GRAPH_GRID_MINOR: int = EnumGraphGrid.IG_MINOR

GRAPH_GRID_DICT = {GRAPH_GRID_MAJOR: "major", GRAPH_GRID_NONE: "none", GRAPH_GRID_MINOR: "minor"}
GRAPH_GRID_REV_DICT = {value: key for key, value in GRAPH_GRID_DICT.items()}

GRAPH_ALIGN_LEFT: int = EnumGraphAlign.IG_LEFT
GRAPH_ALIGN_CENTER: int = EnumGraphAlign.IG_CENTER
GRAPH_ALIGN_RIGHT: int = EnumGraphAlign.IG_RIGHT

GRAPH_ALIGN_DICT = {GRAPH_ALIGN_LEFT: "left", GRAPH_ALIGN_CENTER: "center", GRAPH_ALIGN_RIGHT: "right"}
GRAPH_ALIGN_REV_DICT = {value: key for key, value in GRAPH_ALIGN_DICT.items()}

GRAPH_AXIS_VALUES: int = EnumGraphAxis.IG_VALUES
GRAPH_AXIS_LOG: int = EnumGraphAxis.IG_LOG
GRAPH_AXIS_SEMILOG: int = EnumGraphAxis.IG_SEMILOG
GRAPH_AXIS_PERCENT: int = EnumGraphAxis.IG_PERCENT

GRAPH_AXIS_DICT = {GRAPH_AXIS_VALUES: "values", GRAPH_AXIS_LOG: "log", 
                   GRAPH_AXIS_SEMILOG: "semilog", GRAPH_AXIS_PERCENT: "percent"}
GRAPH_AXIS_REV_DICT = {value: key for key, value in GRAPH_AXIS_DICT.items()}

VAR_MODE_LEVEL: int = EnumIodeVarMode.I_VAR_MODE_LEVEL
VAR_MODE_DIFF: int = EnumIodeVarMode.I_VAR_MODE_DIFF
VAR_MODE_GROWTH_RATE: int = EnumIodeVarMode.I_VAR_MODE_GROWTH_RATE
VAR_MODE_Y0Y_DIFF: int = EnumIodeVarMode.I_VAR_MODE_Y0Y_DIFF
VAR_MODE_Y0Y_GROWTH_RATE: int = EnumIodeVarMode.I_VAR_MODE_Y0Y_GROWTH_RATE

VARIABLES_MODES = _cpp_string_vector_to_py(v_var_modes)

SIMU_INIT_TM1: int = EnumSimulationInitialization.IV_INIT_TM1
SIMU_INIT_TM1_A: int = EnumSimulationInitialization.IV_INIT_TM1_A
SIMU_INIT_EXTRA: int = EnumSimulationInitialization.IV_INIT_EXTRA
SIMU_INIT_EXTRA_A: int = EnumSimulationInitialization.IV_INIT_EXTRA_A
SIMU_INIT_ASIS: int = EnumSimulationInitialization.IV_INIT_ASIS
SIMU_INIT_TM1_NA: int = EnumSimulationInitialization.IV_INIT_TM1_NA
SIMU_INIT_EXTRA_NA: int = EnumSimulationInitialization.IV_INIT_EXTRA_NA

SIMULATION_INITIALIZATION_LIST = _cpp_string_vector_to_py(v_simulation_initialization)

LTOH_STOCK: str = 'S'
LTOH_FLOW: str = 'F'
LTOH_SERIES_TYPES_DICT = {'S': EnumIodeLtoH.LTOH_STOCK, 'F': EnumIodeLtoH.LTOH_FLOW}

LTOH_LINEAR: str = 'L'
LTOH_CUBIC_SPLINESS: str = 'C'
LTOH_STEP: str = 'S'

HTOL_LAST: int = EnumIodeHtoL.HTOL_LAST
HTOL_MEAN: int = EnumIodeHtoL.HTOL_MEAN
HTOL_SUM: int = EnumIodeHtoL.HTOL_SUM 

LOW_TO_HIGH_DICT: Dict[str, str] = _cpp_char_string_map_to_py(mLowToHigh)

SORT_CONNEX: int = 0
SORT_BOTH: int = 1
SORT_NONE: int = 2

W_GDI: int = 1
W_A2M: int = 7
W_MIF: int = 6
W_HTML: int = 5
W_RTF: int = 4
W_CSV: int = 8
W_DUMMY: int = 9
