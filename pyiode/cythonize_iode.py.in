# see https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html

# Import needed modules
try:
    from setuptools import Extension, setup
except ImportError:
    from distutils.core import Extension, setup

from Cython.Build import cythonize
import numpy as np

# Visual Studio dir structure
build_dir          = '${CMAKE_BINARY_DIR}'
root_dir           = '${CMAKE_SOURCE_DIR}'

# C/C++ include directories 

scr4_incl_dir      = '${CMAKE_SOURCE_DIR}/scr4'
iode_incl_dir      = '${CMAKE_SOURCE_DIR}/api'
iode_cpp_incl_dir  = '${CMAKE_SOURCE_DIR}/cpp_api'
boost_incl_dir     = '${Boost_INCLUDE_DIRS}'

include_dirs       = [np.get_include(), boost_incl_dir, root_dir, scr4_incl_dir, iode_incl_dir, iode_cpp_incl_dir, '.']

# C/C++ library directories

scr4_lib_dir       = f'{build_dir}/scr4'
iode_lib_dir       = f'{build_dir}/api'
iode_cpp_lib_dir   = f'{build_dir}/cpp_api'

library_dirs = [scr4_lib_dir, iode_lib_dir, iode_cpp_lib_dir]
libraries    = ['iode_scr4', 'iode_c_api', 'iode_cpp_api', 'odbc32', 'odbccp32', 'ws2_32', 'gdi32', 
                'user32', 'advapi32', 'shell32', 'comdlg32', 'comctl32', 'Winspool', 'legacy_stdio_definitions']

# Extension API reference : https://setuptools.pypa.io/en/latest/userguide/ext_modules.html#extension-api-reference 
# 
# PARAMETERS:
# - name (str)                       – the full name of the extension, including any packages – ie. not a 
#                                      filename or pathname, but Python dotted name.
# - sources (list[str])              – list of source filenames, relative to the distribution root (where the setup 
#                                      script lives), in Unix form (slash-separated) for portability. 
#                                      Source files may be C, C++, SWIG (.i), platform-specific resource files, 
#                                      or whatever else is recognized by the "build_ext" command as source for 
#                                      a Python extension.
# - include_dirs (list[str])         – list of directories to search for C/C++ header files (in Unix form for portability)
# - define_macros                    – list of macros to define; each macro is defined using a 2-tuple: 
#   (list[tuple[str, str|None]])       the first item corresponding to the name of the macro and the second 
#                                      item either a string with its value or None to define it without a 
#                                      particular value (equivalent of "#define FOO" in source or -DFOO on 
#                                      Unix C compiler command line)
# - undef_macros (list[str])         – list of macros to undefine explicitly
# - library_dirs (list[str])         – list of directories to search for C/C++ libraries at link time
# - libraries (list[str])            – list of library names (not filenames or paths) to link against
# - runtime_library_dirs (list[str]) – list of directories to search for C/C++ libraries at run time 
#                                      (for shared extensions, this is when the extension is loaded). 
#                                      Setting this will cause an exception during build on Windows platforms.
# - extra_objects (list[str])        – list of extra files to link with (eg. object files not implied by 'sources', 
#                                      static library that must be explicitly specified, binary resource files, etc.)
# - extra_compile_args (list[str])   – any extra platform- and compiler-specific information to use when compiling the 
#                                      source files in 'sources'. For platforms and compilers where "command line" 
#                                      makes sense, this is typically a list of command-line arguments, but for other 
#                                      platforms it could be anything.
# - extra_link_args (list[str])      – any extra platform- and compiler-specific information to use when linking object files 
#                                      together to create the extension (or to create a new static Python interpreter). 
#                                      Similar interpretation as for 'extra_compile_args'.
# - export_symbols (list[str])       – list of symbols to be exported from a shared extension. Not used on all platforms, 
#                                      and not generally necessary for Python extensions, which typically export exactly 
#                                      one symbol: "init" + extension_name.
# - swig_opts (list[str])            – any extra options to pass to SWIG if a source file has the .i extension.
# - depends (list[str])              – list of files that the extension depends on
# - language (str)                   – extension language (i.e. "c", "c++", "objc"). Will be detected from the source 
#                                      extensions if not provided.
# - optional (bool)                  – specifies that a build failure in the extension should not abort the build process, 
#                                      but simply not install the failing extension.
# - py_limited_api (bool)            – opt-in flag for the usage of Python's limited API.
# 
# Example:
# Extension(name="mylib.foo",       # as it would be imported in Python
#                                   # may include packages/namespaces separated by `.`
#           sources=["foo.c"],      # all sources are compiled into a single binary file
# )

extra_compile_args = [${IODE_CYTHON_FLAGS}]
define_macros=[("NPY_NO_DEPRECATED_API", "NPY_1_7_API_VERSION")]

extensions = Extension('iode',				
                sources = ["iode_python.pyx", "s_pyiode.c"],
                depends = [ "iode_python.pyx", "s_pyiode.c", 
                            "pyiode_cdef.pyx", "pyiode_data.pyx", "pyiode_estim.pyx", 
                            "pyiode_exec.pyx",  "pyiode_larray.pyx", "pyiode_lec.pyx",
                            "pyiode_model.pyx", "objects/scalar.pyx", "objects/equation.pyx", 
                            "pyiode_objs.pyx", "pyiode_print.pyx", "pyiode_reports.pyx", 
                            "pyiode_period.pyx", "pyiode_sample.pyx", "pyiode_util.pyx", 
                            "pyiode_ws.pyx"],
                include_dirs=include_dirs, 
                library_dirs=library_dirs, 
                libraries=libraries,
                language='c++', 
                extra_compile_args=extra_compile_args, 
                define_macros=define_macros
                )

# ==========================================================================================================
# ---- EXPERIMENTAL ----
# WARNING: 
# 1. Files hierarchy: 
#    - https://stackoverflow.com/a/10535470
#    - https://github.com/cython/cython/wiki/PackageHierarchy
# 2. Link Extension module with C/C++ libraries:
#    - If several pyx files working on the same C/C++ memory space -> must link to SHARED C/C++ libraries.
#      See https://groups.google.com/g/cython-users/c/GAAPYb2X304 
#      -> Let two pyx files being compiled separately and links to the same C/C++ library. 
#         If statically linked, each extension module will have a independent pool itself. 
#         The problem exists for cdef way, too.
#         See https://groups.google.com/g/cython-users/c/GAAPYb2X304/m/rF8T9LCJAwAJ 
# 
# extensions =  [ Extension(name = '*', sources = ["iode/**/*.pyx"], 
#                           include_dirs=include_dirs, 
#                           library_dirs=library_dirs, 
#                           libraries=libraries,
#                           language='c++', 
#                           extra_compile_args=extra_compile_args, 
#                           define_macros=define_macros
#                           )       
#               ]
# ==========================================================================================================

# compiler_directives: https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#compiler-directives
compiler_directives = {"binding": True, "language_level": 3, "embedsignature": True, "embedsignature.format": "python"}

# cythonize arguments: https://cython.readthedocs.io/en/latest/src/userguide/source_files_and_compilation.html#cythonize-arguments
setup(
    name='iode',
    version='${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}',
    install_requires=['numpy', 'pandas'],
    ext_modules=cythonize(extensions, compiler_directives=compiler_directives)
)
