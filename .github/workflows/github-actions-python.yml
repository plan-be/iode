name: Build Python binding files

on: 
  # line below makes jobs defined in this script (workflow) reusable
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_call:
    inputs:
      build-config:
        default: 'release'
        required: true
        type: string

jobs:
    build_python:
        name: Build Python API for IODE
        strategy:
          matrix:
            os: [windows-latest, ubuntu-latest]
            python-minor-version: ["10", "11", "12"]
    
        runs-on: ${{ matrix.os }}

        # see https://docs.github.com/en/actions/learn-github-actions/expressions#example 
        env:
          os: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}
        
        steps:
          - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
          - run: echo "This job is now running on a ${{ runner.os }} server"
          - run: echo "The name of the repository is ${{ github.repository }}."
          - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
          - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
          - run: echo "The workspace directory is ${{ github.workspace }}."
          - name: Checkout repository code
            uses: actions/checkout@v2
          - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
          - name: Install dependencies on linux
            if: runner.os == 'Linux'
            run: sudo apt install ninja-build
          - name: Install dependencies on windows
            if: runner.os == 'Windows'
            shell: bash
            run: |
              choco install ninja
              ninja --version
              cmake --version
          - name: Add cl.exe to PATH
            if: runner.os == 'Windows'
            # See https://github.com/marketplace/actions/enable-developer-command-prompt
            uses: ilammy/msvc-dev-cmd@v1
            with:
              arch: x64
          - name: Print preset config
            shell: bash
            run: echo "${{ env.os }}-${{ inputs.build-config }}"
          - name: Configure CMake
            shell: bash
            # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
            # see CMakePresets.json file
            # for more details about cmake preset:
            #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
            #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
            run: | 
              cmake --version
              cmake --preset ${{ env.os }}-${{ inputs.build-config }}
          - name: Build the SCR4, C and C++ API libs
            uses: ./.github/actions/build_api
            with:
              cmake-config: ${{ env.os }}-${{ inputs.build-config }}
          # - name: Test the C and C++ APIs
          #   uses: ./.github/actions/test_api
          #   with:
          #     cmake-config: ${{ env.os }}-${{ inputs.build-config }}
          - name: Configure Conda
            uses: conda-incubator/setup-miniconda@v2
            with:
              # channels: conda-forge, defaults
              python-version: "3.${{ matrix.python-minor-version }}"
              auto-update-conda: true
              auto-activate-base: true
              activate-environment: true
          - name: Check conda
            shell: bash -el {0}
            run: conda info
          - name: Install Python libraires
            shell: bash -el {0}
            # fixed numpy<2.0 since newer versions make mypy to crash 
            # (see mypy issue https://github.com/python/mypy/issues/17538)
            run: |
              conda config --add channels conda-forge
              conda config --add channels larray-project
              conda install --file doc/requirements.txt
          - name: Configure CMake
            shell: bash -el {0}
            # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
            # see CMakePresets.json file
            # for more details about cmake preset:
            #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
            #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
            run: | 
              cmake --version
              cmake --preset ${{ env.os }}-${{ inputs.build-config }}
          - name: Build target iode_cython before pip wheel to make sure it compiles
            shell: bash -el {0}
            run: | 
              cython --version
              mypy --version
              cmake --build --preset ${{ env.os }}-${{ inputs.build-config }} --target iode_cython
          - name: Build iode wheel file
            shell: bash -el {0}
            run: |
              cd pyiode 
              cython --version
              mypy --version
              pip wheel --verbose .
          - name: Install iode package
            shell: bash -el {0}
            run: | 
              cd pyiode
              filename=$(ls iode*.whl) 
              echo $filename 
              pip install $filename
          - name: Test iode Python
            if: runner.os == 'Windows'
            shell: bash -el {0}
            run: pytest
          - name: Upload wheel file
            if: ${{ runner.os == 'Windows' && success() }}
            uses: actions/upload-artifact@v4
            with:
              name: iode-python-3.${{ matrix.python-minor-version }}
              path: "${{ github.workspace }}/pyiode/iode*.whl"
              if-no-files-found: error    # 'warn' or 'ignore' are also available, defaults to `warn`
