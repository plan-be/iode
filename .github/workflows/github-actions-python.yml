name: Build Python binding files

on: 
  # line below makes jobs defined in this script (workflow) reusable
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_call:
    inputs:
      build-config:
        default: 'windows-debug'
        required: true
        type: string

jobs:
    build_python:
        name: Build Python API for IODE
        strategy:
          matrix:
            os: [windows-latest]
            python-minor-version: ["9", "10", "11"]
    
        runs-on: ${{ matrix.os }}
    
        steps:
          - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
          - run: echo "This job is now running on a ${{ runner.os }} server"
          - run: echo "The name of the repository is ${{ github.repository }}."
          - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
          - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
          - run: echo "The workspace directory is ${{ github.workspace }}."
          - name: Checkout repository code
            uses: actions/checkout@v2
          - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
          - name: Install dependencies on windows
            if: runner.os == 'Windows'
            shell: bash
            run: |
              choco install ninja
              ninja --version
              cmake --version
          - name: Add cl.exe to PATH
            if: runner.os == 'Windows'
            # See https://github.com/marketplace/actions/enable-developer-command-prompt
            uses: ilammy/msvc-dev-cmd@v1
            with:
              arch: x64
          - name: Configure Conda
            uses: conda-incubator/setup-miniconda@v2
            with:
              # channels: conda-forge, defaults
              python-version: "3.${{ matrix.python-minor-version }}"
              auto-update-conda: true
              auto-activate-base: true
              activate-environment: true
          - name: Check conda
            shell: bash -el {0}
            run: conda info
          - name: Install Python libraires - numpy, pandas, larray cython nanobind and pytest
            shell: bash -el {0}
            run: |
              conda config --add channels conda-forge
              conda config --add channels larray-project
              conda install numpy pandas larray cython nanobind pytest
          - name: Configure CMake
            shell: bash -el {0}
            # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
            # see CMakePresets.json file
            # for more details about cmake preset:
            #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
            #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
            run: cmake --preset ${{ inputs.build-config }}
          - name: Build Python IODE (Cython)
            shell: bash -el {0}
            run: cmake --build --preset ${{ inputs.build-config }} --target iode_python 
          - name: Test Python IODE (Cython)
            shell: bash -el {0}
            run: cmake --build --preset ${{ inputs.build-config }} --target test_python 
          - name: Build Python IODE (nanobind)
            shell: bash -el {0}
            run: cmake --build --preset ${{ inputs.build-config }} --target iode 
          - name: Test Python IODE (nanobind)
            shell: bash -el {0}
            run: cmake --build --preset ${{ inputs.build-config }} --target test_nanobind 
          - name: Upload PyIode compiled files
            if: ${{ success() }}
            uses: actions/upload-artifact@v3
            with:
              name: iode-python-3${{ matrix.python-minor-version }}
              path: "${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/py3${{ matrix.python-minor-version }}/"
              if-no-files-found: error    # 'warn' or 'ignore' are also available, defaults to `warn`
    