name: Build and test the C and C++ API

on: 
  # line below makes jobs defined in this script (workflow) reusable
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_call:
    inputs:
      build-config:
        default: 'debug'
        required: true
        type: string

jobs:
  build_and_test_api:
    name: Build And Test Static Libraries
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    # The CMake configure and build commands are platform agnostic and should 'ideally' work equally well on Windows or Linux.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    # List of softwares installed on windows-latest: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: ${{ matrix.os }}

    # see https://docs.github.com/en/actions/learn-github-actions/expressions#example 
    env:
      os: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server"
      - run: echo "The name of the repository is ${{ github.repository }}."
      - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
      - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
      - run: echo "The workspace directory is ${{ github.workspace }}."
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install dependencies on linux
        if: runner.os == 'Linux'
        run: sudo apt install ninja-build
      - name: Install dependencies on windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install ninja
          ninja --version
          cmake --version
      - name: Add cl.exe to PATH
        if: runner.os == 'Windows'
        # See https://github.com/marketplace/actions/enable-developer-command-prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Install Python 3.12
        if: runner.os == 'Windows'
        uses: actions/setup-python@v6
        with:
          python-version: '3.12' 
      # required to run the Python script tests/generate_big_vars_ws.py
      # called the test functions Tests_BIG_WS
      - name: Install Python packages numpy, pandas, matplotlib and iode
        if: runner.os == 'Windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install numpy
          pip install pandas
          pip install matplotlib
          pip install iode
      - name: Print preset config
        shell: bash
        run: echo "${{ env.os }}-${{ inputs.build-config }}"
      - name: Configure CMake
        shell: bash
        # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
        # see CMakePresets.json file
        # for more details about cmake preset:
        #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
        #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
        run: | 
          cmake --version
          cmake --preset ${{ env.os }}-${{ inputs.build-config }}
      - name: Build the SCR4, C and C++ API libs
        uses: ./.github/actions/build_api
        with:
          cmake-config: ${{ env.os }}-${{ inputs.build-config }}
      - name: Test the C and C++ APIs
        if: runner.os == 'Windows'
        uses: ./.github/actions/test_api
        with:
          cmake-config: ${{ env.os }}-${{ inputs.build-config }}
      - run: echo "This job's status is ${{ job.status }}."

  test_sanitize:
    name: Run Tests With Sanitize Option
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    # see https://docs.github.com/en/actions/learn-github-actions/expressions#example 
    env:
      os: ${{ matrix.os == 'windows-latest' && 'windows' || 'linux' }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install dependencies on linux
        if: runner.os == 'Linux'
        run: sudo apt install ninja-build
      - name: Install dependencies on windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install ninja
          ninja --version
          cmake --version
      - name: Add cl.exe to PATH
        if: runner.os == 'Windows'
        # See https://github.com/marketplace/actions/enable-developer-command-prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Install Python 3.12
        if: runner.os == 'Windows'
        uses: actions/setup-python@v6
        with:
          python-version: '3.12' 
      # required to run the Python script tests/generate_big_vars_ws.py
      # called the test functions Tests_BIG_WS
      - name: Install Python packages numpy, pandas, matplotlib and iode
        if: runner.os == 'Windows'
        shell: bash
        run: |
          python -m pip install --upgrade pip
          pip install numpy
          pip install pandas
          pip install matplotlib
          pip install iode
      - name: Print preset config
        shell: bash
        run: echo "${{ env.os }}-${{ inputs.build-config }}-sanitize"
      - name: Configure CMake
        shell: bash
        # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
        # see CMakePresets.json file
        # for more details about cmake preset:
        #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
        #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
        run: | 
          cmake --version
          cmake --preset ${{ env.os }}-${{ inputs.build-config }}-sanitize
      - name: Build the SCR4, C and C++ API libs
        uses: ./.github/actions/build_api
        with:
          cmake-config: ${{ env.os }}-${{ inputs.build-config }}-sanitize
      - name: Test the C and C++ APIs
        if: runner.os == 'Windows'
        uses: ./.github/actions/test_api
        with:
          cmake-config: ${{ env.os }}-${{ inputs.build-config }}-sanitize
      - run: echo "This job's status is ${{ job.status }}."
