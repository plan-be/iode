name: GitHub Actions IODE

# Triggers the workflow on pull request events
on: pull_request

jobs:
  build_and_test_api:
    name: Build And Test Static Libraries
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest]
        # Note (18/05/2022): GTest failes to compile on Windows Server 2022 (windows-latest)
        os: [windows-2019]
        arch: ["x64"]

    # The CMake configure and build commands are platform agnostic and should 'ideally' work equally well on Windows or Linux.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    # List of softwares installed on windows-latest: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: ${{ matrix.os }}

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server"
      - run: echo "The name of the repository is ${{ github.repository }}."
      - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
      - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
      - run: echo "The workspace directory is ${{ github.workspace }}."
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install dependencies on windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version
          cmake --version
      - name: Add cl.exe to PATH
        if: runner.os == 'Windows'
        # See https://github.com/marketplace/actions/enable-developer-command-prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Install Qt
        if: contains(github.head_ref, 'gui')
        # See https://github.com/jurplel/install-qt-action
        uses: jurplel/install-qt-action@v3
        with:
          version: '6.2.1'
          host: 'windows'
          target: 'desktop'
          # TODO : adpat arch for Linux
          arch: 'win64_msvc2019_64'
          dir: '${{ github.workspace }}/'
          modules: 'qtcharts'
          install-deps: 'true'
      # See https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      # Note: use $env:GITHUB_ENV instead of $GITHUB_ENV on Windows OS
      - name: Preset config for Windows
        if: runner.os == 'Windows'
        run: |
          echo "PRESET_CONFIG=windows-${{ matrix.arch }}-debug-sanitize" >> $env:GITHUB_ENV
      - name: Preset config for Linux
        if: runner.os == 'Linux'
        run: |
          echo "PRESET_CONFIG=linux-${{ matrix.arch }}-debug-sanitize" >> $GITHUB_ENV
      - name: Print preset config
        run: echo "${{ env.PRESET_CONFIG }}"
      - name: Configure CMake
        # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
        # see CMakePresets.json file
        # for more details about cmake preset:
        #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
        #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
        run: cmake --preset ${{ env.PRESET_CONFIG }}
      - name: Build SCR4
        # cmake --build --preset <buildPreset> where <buildPreset> is the name of the active Build Preset.
        # see CMakePresets.json file
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target scr4iode 
      - name: Build C IODE API
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target iodeapi 
      - name: Build C++ IODE API
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target iodecppapi 
      - name: Build C API Tests
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target test_c_api
      - name: Build C++ API Tests
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target test_cpp_api
      - run: echo "The workflow is now ready to test your code on the runner."
      - name: Run C API Tests
        run: ctest --preset c-api-${{ env.PRESET_CONFIG }}
      - name: Run C++ API Tests
        run: ctest --preset cpp-api-${{ env.PRESET_CONFIG }}
      - name: Build GUI
        if: contains(github.head_ref, 'gui')
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target iode_gui
      - run: echo "This job's status is ${{ job.status }}."

  test_no_sanitize:
    name: Run Tests Without Sanitize Option (Only If Tests With Sanitize Failed)
    needs: build_and_test_api
    if: always() && needs.build_and_test_api.result == 'failure'
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest]
        # Note (18/05/2022): GTest failes to compile on Windows Server 2022 (windows-latest)
        os: [windows-2019]
        arch: ["x64"]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install dependencies on windows
        if: runner.os == 'Windows'
        run: |
          choco install ninja
          ninja --version
          cmake --version
      - name: Add cl.exe to PATH
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Preset config for Windows
        if: runner.os == 'Windows'
        run: |
          echo "PRESET_CONFIG=windows-${{ matrix.arch }}-debug" >> $env:GITHUB_ENV
      - name: Preset config for Linux
        if: runner.os == 'Linux'
        run: |
          echo "PRESET_CONFIG=linux-${{ matrix.arch }}-debug" >> $GITHUB_ENV
      - name: Print preset config
        run: echo "${{ env.PRESET_CONFIG }}"
      - name: Configure CMake
        run: cmake --preset ${{ env.PRESET_CONFIG }}
      - name: Build C API Tests
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target test_c_api
      - name: Build C++ API Tests
        run: cmake --build --preset ${{ env.PRESET_CONFIG }} --target test_cpp_api
      - run: echo "The workflow is now ready to test your code on the runner."
      - name: Run C API Tests
        run: ctest --preset c-api-${{ env.PRESET_CONFIG }}
      - name: Run C++ API Tests
        run: ctest --preset cpp-api-${{ env.PRESET_CONFIG }}
      - run: echo "This job's status is ${{ job.status }}."
