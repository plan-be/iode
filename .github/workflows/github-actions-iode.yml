name: GitHub Actions IODE

# Triggers the workflow on pull request events
on: pull_request

jobs:
  build_and_test_api:
    name: Build And Test Static Libraries
    if: ${{ !(contains(github.head_ref, 'doc') || contains(github.head_ref, 'nsis')) }}
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest]
        # Note (18/05/2022): GTest failes to compile on Windows Server 2022 (windows-latest)
        os: [windows-2019]
        build-config: [windows-debug]

    # The CMake configure and build commands are platform agnostic and should 'ideally' work equally well on Windows or Linux.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    # List of softwares installed on windows-latest: https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: ${{ matrix.os }}

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server"
      - run: echo "The name of the repository is ${{ github.repository }}."
      - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
      - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
      - run: echo "The workspace directory is ${{ github.workspace }}."
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Build the SCR4, C and C++ API libs
        uses: ./.github/actions/build_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - name: Test the C and C++ APIs
        uses: ./.github/actions/test_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - run: echo "This job's status is ${{ job.status }}."

  test_sanitize:
    name: Run Tests With Sanitize Option
    if: ${{ !(contains(github.head_ref, 'gui') || contains(github.head_ref, 'cython') || contains(github.head_ref, 'doc') || contains(github.head_ref, 'nsis')) }}
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest]
        # Note (18/05/2022): GTest failes to compile on Windows Server 2022 (windows-latest)
        os: [windows-2019]
        build-config: [windows-debug-sanitize]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Build the SCR4, C and C++ API libs
        uses: ./.github/actions/build_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - name: Test the C and C++ APIs
        uses: ./.github/actions/test_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - run: echo "This job's status is ${{ job.status }}."


  build_cli:
    name: Build IODE CLI
    if: ${{ (contains(github.head_ref, 'cmd') || contains(github.head_ref, 'command') || contains(github.head_ref, 'cli')) }}
    strategy:
      matrix:
        # os: [windows-latest, ubuntu-latest]
        # Note (18/05/2022): GTest failes to compile on Windows Server 2022 (windows-latest)
        os: [windows-2019]
        build-config: [windows-debug]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Build the SCR4, C and C++ API libs
        uses: ./.github/actions/build_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - name: Test the C and C++ APIs
        uses: ./.github/actions/test_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - name: Build CLI
        run: cmake --build --preset ${{ matrix.build-config }} --target iodecmd 
      - run: echo "This job's status is ${{ job.status }}."


  build_gui:
    name: Build Graphical User Interface
    if: contains(github.head_ref, 'gui')
    strategy:
      matrix:
        os: [windows-latest]
        build-config: [windows-debug]
    runs-on: ${{ matrix.os }}

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server"
      - run: echo "The name of the repository is ${{ github.repository }}."
      - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
      - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
      - run: echo "The workspace directory is ${{ github.workspace }}."
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install Qt
        uses: ./.github/actions/install_qt
      - name: Build the SCR4, C and C++ API libs
        uses: ./.github/actions/build_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - name: Test the C and C++ APIs
        uses: ./.github/actions/test_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - name: Build GUI
        run: cmake --build --preset ${{ matrix.build-config }} --target iode_gui
      - run: echo "This job's status is ${{ job.status }}."

  build_cython:
    name: Build Python API for IODE
    if: ${{ contains(github.head_ref, 'cython') || contains(github.head_ref, 'nsis') }}
    strategy:
      matrix:
        os: [windows-latest]
        build-config: [windows-debug]
        python-minor-version: ["9", "10", "11"]

    runs-on: ${{ matrix.os }}

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server"
      - run: echo "The name of the repository is ${{ github.repository }}."
      - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
      - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
      - run: echo "The workspace directory is ${{ github.workspace }}."
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install dependencies on windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          choco install ninja
          ninja --version
          cmake --version
      - name: Add cl.exe to PATH
        if: runner.os == 'Windows'
        # See https://github.com/marketplace/actions/enable-developer-command-prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Configure Conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          # channels: conda-forge, defaults
          python-version: "3.${{ matrix.python-minor-version }}"
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: true
      - name: Check conda
        shell: bash -el {0}
        run: conda info
      - name: Install Python libraires - numpy, pandas and cython
        shell: bash -el {0}
        run: conda install numpy pandas cython 
      - name: Configure CMake
        shell: bash -el {0}
        # cmake --preset <configurePreset> where <configurePreset> is the name of the active Configure Preset.
        # see CMakePresets.json file
        # for more details about cmake preset:
        #   - https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html
        #   - https://docs.microsoft.com/en-us/cpp/build/cmake-presets-vs?view=msvc-170
        run: cmake --preset ${{ matrix.build-config }}
      - name: Build Python IODE
        shell: bash -el {0}
        run: cmake --build --preset ${{ matrix.build-config }} --target iode_python 
      - name: Upload PyIode compiled files
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: iode-python-3${{ matrix.python-minor-version }}
          path: "${{ github.workspace }}/out/build/${{ matrix.build-config }}/pyiode/py3${{ matrix.python-minor-version }}/"
          if-no-files-found: error    # 'warn' or 'ignore' are also available, defaults to `warn`

          
  build_doc:
    name: Build user documentation
    if: ${{ contains(github.head_ref, 'doc') || contains(github.head_ref, 'nsis') }}
    runs-on: ubuntu-latest
    env:
      build-config: linux-debug
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install ninja
        run: sudo apt-get install -y ninja-build
      - name: Install Tex Live
        run: sudo apt-get install -y texlive
      - name: Print preset config
        run: echo "${{ env.build-config }}"
      - name: Configure CMake
        run: cmake --preset ${{ env.build-config }}
      - name: Build Keyboard Shortcuts PDF
        run: cmake --build --preset ${{ env.build-config }} --target keyboard_shortcuts
      - name: Upload documentation files
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: iode-doc
          path: "${{ github.workspace }}/doc/build/"
          if-no-files-found: error    # 'warn' or 'ignore' are also available, defaults to `warn`

  
  build_nsis:
    name: Build installer using NSIS
    # run build_cython and build_doc jobs before
    needs: [build_cython, build_doc]
    if: ${{ contains(github.head_ref, 'nsis') }}
    strategy:
      matrix:
        os: [windows-latest]
        build-config: [windows-debug]

    runs-on: ${{ matrix.os }}

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "This job is now running on a ${{ runner.os }} server"
      - run: echo "The name of the repository is ${{ github.repository }}."
      - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
      - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
      - run: echo "The workspace directory is ${{ github.workspace }}."
      - name: Checkout repository code
        uses: actions/checkout@v2
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
      - name: Install Qt
        uses: ./.github/actions/install_qt

      - name: Build the SCR4, C and C++ API libs
        uses: ./.github/actions/build_api
        with:
          cmake-config: ${{ matrix.build-config }}
      - name: Test the C and C++ APIs
        uses: ./.github/actions/test_api
        with:
          cmake-config: ${{ matrix.build-config }}

      - name: Build CLI
        run: cmake --build --preset ${{ matrix.build-config }} --target iodecmd
        
      - name: Build the GUI
        run: cmake --build --preset ${{ matrix.build-config }} --target iode_gui

      - name: Restore Python 3.9 binding files for IODE
        uses: actions/download-artifact@v3
        with:
          name: iode-python-39
          path: ${{ github.workspace }}/out/build/${{ matrix.build-config }}/pyiode/py39    
      - name: check for Python 3.9 binding file  
        run: dir ${{ github.workspace }}/out/build/${{ matrix.build-config }}/pyiode/py39

      - name: Restore Python 3.10 binding files for IODE
        uses: actions/download-artifact@v3
        with:
          name: iode-python-310
          path: ${{ github.workspace }}/out/build/${{ matrix.build-config }}/pyiode/py310
      - name: check for Python 3.10 binding file  
        run: dir ${{ github.workspace }}/out/build/${{ matrix.build-config }}/pyiode/py310

      - name: Restore Python 3.11 binding files for IODE
        uses: actions/download-artifact@v3
        with:
          name: iode-python-311
          path: ${{ github.workspace }}/out/build/${{ matrix.build-config }}/pyiode/py311
      - name: check for Python 3.11 binding file  
        run: dir ${{ github.workspace }}/out/build/${{ matrix.build-config }}/pyiode/py311

      - name: Restore Documentation Files
        uses: actions/download-artifact@v3
        with:
          name: iode-doc
          path: ${{ github.workspace }}/doc/build
      - name: check for documentation files
        run: dir ${{ github.workspace }}/doc/build

      - name: Build Installer (NSIS)
        run: cmake --build --preset ${{ matrix.build-config }} --target nsis
      - run: echo "This job's status is ${{ job.status }}."
