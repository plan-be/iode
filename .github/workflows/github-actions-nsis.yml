name: Build Windows installer and updater

on: 
  # line below makes jobs defined in this script (workflow) reusable
  # https://docs.github.com/en/actions/using-workflows/reusing-workflows
  workflow_call:
    inputs:
      build-config:
        default: 'windows-debug'
        required: true
        type: string

jobs:
    # see https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow 
    build_python:
      uses: ./.github/workflows/github-actions-python.yml 
      with:
        build-config: ${{ inputs.build-config }}

    build_doc:
      uses: ./.github/workflows/github-actions-doc.yml

    build_nsis:
        name: Build installer using NSIS
        needs: [build_python, build_doc]
        strategy:
          matrix:
            os: [windows-latest]
    
        runs-on: ${{ matrix.os }}
    
        steps:
          - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
          - run: echo "This job is now running on a ${{ runner.os }} server"
          - run: echo "The name of the repository is ${{ github.repository }}."
          - run: echo "The target branch of the current pull request is ${{ github.base_ref }}."
          - run: echo "The source branch of the current pull request is ${{ github.head_ref }}."
          - run: echo "The workspace directory is ${{ github.workspace }}."
          - name: Checkout repository code
            uses: actions/checkout@v2
          - run: echo "The ${{ github.repository }} repository has been cloned to the runner."
    
          - name: Restore Python 3.9 binding files for IODE
            uses: actions/download-artifact@v3
            with:
              name: iode-python-39
              path: ${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/py39    
          - name: check for Python 3.9 binding file  
            run: dir ${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/py39
    
          - name: Restore Python 3.10 binding files for IODE
            uses: actions/download-artifact@v3
            with:
              name: iode-python-310
              path: ${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/py310
          - name: check for Python 3.10 binding file  
            run: dir ${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/py310
    
          - name: Restore Python 3.11 binding files for IODE
            uses: actions/download-artifact@v3
            with:
              name: iode-python-311
              path: ${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/py311
          - name: check for Python 3.11 binding file  
            run: dir ${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/py311
    
          - name: Group iode.pyd files into a Zip file
            run: tar -cvf python_iode.zip ./py39/iode.pyd ./py310/iode.pyd ./py311/iode.pyd
            working-directory: ${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode

          - name: Upload Python Zip file
            if: ${{ success() }}
            uses: actions/upload-artifact@v3
            with:
              name: iode-python
              path: "${{ github.workspace }}/out/build/${{ inputs.build-config }}/pyiode/python_iode.zip"
              if-no-files-found: error

          - name: Restore Documentation Files
            uses: actions/download-artifact@v3
            with:
              name: iode-doc
              path: ${{ github.workspace }}/doc/build
          - name: check for documentation files
            run: dir ${{ github.workspace }}/doc/build

          - name: Install Qt
            uses: ./.github/actions/install_qt
    
          - name: Build the SCR4, C and C++ API libs
            uses: ./.github/actions/build_api
            with:
              cmake-config: ${{ inputs.build-config }}
          
          - name: Test the C and C++ APIs
            uses: ./.github/actions/test_api
            with:
              cmake-config: ${{ inputs.build-config }}
    
          - name: Build CLI
            run: cmake --build --preset ${{ inputs.build-config }} --target iodecmd

          - name: Upload CLI
            if: ${{ success() }}
            uses: actions/upload-artifact@v3
            with:
              name: iode-cli
              path: "${{ github.workspace }}/out/build/${{ inputs.build-config }}/cmd/*.exe"
              if-no-files-found: error 
            
          - name: Build the GUI
            run: cmake --build --preset ${{ inputs.build-config }} --target iode_gui 
    
          - name: Build Windows Installer and Updater (NSIS)
            run: cmake --build --preset ${{ inputs.build-config }} --target nsis

          - name: Upload Windows Installer and Updater
            if: ${{ success() }}
            uses: actions/upload-artifact@v3
            with:
              name: iode-nsis
              path: "${{ github.workspace }}/out/build/${{ inputs.build-config }}/nsis/*.exe"
              if-no-files-found: error 
    
          - run: echo "This job's status is ${{ job.status }}."
    